name: Build

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.401
    - name: Get Tag Version
      id: release_version
      if: startsWith(github.ref, "refs/tags/v") && matrix.os == 'ubuntu-latest'
      run: |
        echo ::set-output name=current_version::${GITHUB_REF#refs/tags/v}
      shell: bash
    - name: Read Changelog
      id: release_notes
      if: startsWith(github.ref, "refs/tags/v") && matrix.os == 'ubuntu-latest'
      uses: mindsers/changelog-reader-action@v2
      with:
        version: ${{ steps.release_version.outputs.current_version }}
        path: ./CHANGELOG.md
    - name: Setup NuGet
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'
    - name: Install Dependencies
      run: |
        dotnet restore ./FSharpWrap.sln
        dotnet tool restore
    - name: Build
      env:
        PACKAGE_RELEASE_NOTES: ${{ steps.release_notes.outputs.changes }}
        PACKAGE_VERSION: ${{ steps.release_notes.outputs.version }}
      run: dotnet fake run build.fsx
    - name: Upload Packages
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: FSharpWrap
        path: |
          ./out/FSharpWrap.*.nupkg
          ./CHANGELOG.md
  publish:
    if: startsWith(github.ref, "refs/tags/v")
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Download Packages
      uses: actions/download-artifact@v2
      with:
        name: FSharpWrap
