name: Build

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:

jobs:
  build:
    outputs:
      release_notes_changes: ${{ steps.release_notes.outputs.changes }}
      release_notes_version: ${{ steps.release_notes.outputs.version }}
      release_notes_status: ${{ steps.release_notes.outputs.status }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    env:
      DOTNET_NOLOGO: true
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - name: Get Tag Version
      id: release_version
      if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'ubuntu-latest'
      run: |
        echo ::set-output name=current_version::${GITHUB_REF#refs/tags/v}
      shell: bash
    - name: Read Changelog
      id: release_notes
      if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'ubuntu-latest'
      uses: mindsers/changelog-reader-action@v2
      with:
        version: ${{ steps.release_version.outputs.current_version }}
        path: ./CHANGELOG.md
    - name: Update Release Notes
      if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'ubuntu-latest'
      run: |
        echo "PACKAGE_VERSION=${{ steps.release_notes.outputs.version }}" >> $GITHUB_ENV
      shell: bash
    - name: Setup NuGet
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'
    - name: Install Dependencies
      run: |
        dotnet restore ./FSharpWrap.sln
        dotnet tool restore
    - name: Determine Target
      id: build_script_target
      run: |
        if ("${{ matrix.os }}" -eq "ubuntu-latest") {
            $target = "Pack"
        }
        else {
            $target = "Build Examples"
        }
        
        -join("::set-output name=target::", $target) | Write-Host
      shell: pwsh
    - name: Build
      run: dotnet fake run build.fsx -t "${{ steps.build_script_target.outputs.target }}"
    - name: Upload Packages
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: FSharpWrap
        path: |
          ./out/*.nupkg
          ./out/BenchmarkDotNet.Artifacts/results/*.*
          ./CHANGELOG.md
  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Setup NuGet
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'
    - name: Download Packages
      uses: actions/download-artifact@v2
      with:
        name: FSharpWrap
    - name: Publish GitHub
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: ./out/*.nupkg
        body: ${{ needs.build.outputs.release_notes_changes }}
        prerelease: ${{ needs.build.outputs.release_notes_status == 'prereleased' }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish NuGet
      run: |
        nuget push ./out/FSharpWrap.${{ needs.build.outputs.release_notes_version }}.nupkg -ApiKey ${{ secrets.NUGET_API_KEY }} -Source https://api.nuget.org/v3/index.json
