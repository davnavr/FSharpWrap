// This code was automatically generated by FSharpWrap
// Changes made to this file will be lost when it is regenerated
// - WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// - System.Xml.XPath.XDocument, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Xml.XPath, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Xml.XmlSerializer, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Xml.XmlDocument, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Xml.XDocument, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Xml.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Xml.ReaderWriter, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Windows, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Web.HttpUtility, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.ValueTuple, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Transactions.Local, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Threading.Timer, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Threading.ThreadPool, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Threading.Thread, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Threading.Tasks.Parallel, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Threading.Tasks.Extensions, Version=4.3.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Threading.Tasks, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Threading.Tasks.Dataflow, Version=4.6.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Threading.Overlapped, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Threading, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Threading.Channels, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Text.RegularExpressions, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Text.Json, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Text.Encodings.Web, Version=4.0.5.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Text.Encoding.Extensions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Text.Encoding, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Text.Encoding.CodePages, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// - System.Security.SecureString, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Security.Principal, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Security.Cryptography.X509Certificates, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Security.Cryptography.Primitives, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Security.Cryptography.Encoding, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Security.Cryptography.Csp, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Security.Cryptography.Algorithms, Version=4.3.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Security.Claims, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.Serialization.Xml, Version=4.1.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.Serialization.Primitives, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.Serialization.Json, Version=4.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.Serialization.Formatters, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Runtime.Numerics, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.Loader, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.Intrinsics, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Runtime.InteropServices.WindowsRuntime, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.InteropServices.RuntimeInformation, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.InteropServices, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.Handles, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.Extensions, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.CompilerServices.VisualC, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Runtime.CompilerServices.Unsafe, Version=4.0.6.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Resources.Writer, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Resources.ResourceManager, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Resources.Reader, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Reflection.TypeExtensions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Reflection.Primitives, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Reflection.Metadata, Version=1.4.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Reflection.Extensions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Reflection.Emit.Lightweight, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Reflection.Emit.ILGeneration, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Reflection.Emit, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Reflection, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Reflection.DispatchProxy, Version=4.0.6.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.ObjectModel, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Numerics.Vectors, Version=4.1.6.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Net.WebSockets, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net.WebSockets.Client, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net.WebProxy, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Net.WebHeaderCollection, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net.WebClient, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Net.Sockets, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net.ServicePoint, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Net.Security, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net.Requests, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net.Primitives, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net.Ping, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net.NetworkInformation, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net.NameResolution, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net.Mail, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Net.HttpListener, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Net.Http, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Net, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Memory, Version=4.2.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Linq.Queryable, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Linq.Parallel, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Linq.Expressions, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Linq, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.IO.UnmanagedMemoryStream, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.IO.Pipes, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.IO.MemoryMappedFiles, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.IO.IsolatedStorage, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.IO.FileSystem.Watcher, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.IO.FileSystem.Primitives, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.IO.FileSystem.DriveInfo, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.IO.FileSystem, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.IO, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.IO.Compression.ZipFile, Version=4.0.5.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.IO.Compression.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.IO.Compression, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.IO.Compression.Brotli, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Globalization.Extensions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Globalization, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Globalization.Calendars, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Dynamic.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Drawing.Primitives, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Diagnostics.Tracing, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Diagnostics.TraceSource, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Diagnostics.Tools, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Diagnostics.TextWriterTraceListener, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Diagnostics.StackTrace, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Diagnostics.Process, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Diagnostics.FileVersionInfo, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Diagnostics.DiagnosticSource, Version=4.0.5.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.Diagnostics.Debug, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Diagnostics.Contracts, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Data.DataSetExtensions, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Data.Common, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - System.Console, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.ComponentModel.TypeConverter, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.ComponentModel.Primitives, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.ComponentModel.EventBasedAsync, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.ComponentModel, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// - System.ComponentModel.Annotations, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Collections.Specialized, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Collections.NonGeneric, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Collections.Immutable, Version=1.2.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Collections, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Collections.Concurrent, Version=4.0.15.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - System.Buffers, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - System.AppContext, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
// - mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// - Microsoft.Win32.Primitives, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - Microsoft.VisualBasic, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - Microsoft.VisualBasic.Core, Version=10.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// - FSharp.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
#nowarn "44" "57" "64"
namespace ``System``
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``AccessViolationException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``AccessViolationException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``AggregateException`` =
        begin
            let inline ``flatten``(``this``:``System``.``AggregateException``)= ``this``.``Flatten``()
            let inline ``getBaseException``(``this``:``System``.``AggregateException``)= ``this``.``GetBaseException``()
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``AggregateException``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``handle``(``predicate``:``System``.``Func``<``System``.``Exception``,``System``.``Boolean``>)(``this``:``System``.``AggregateException``)= ``this``.``Handle``(``predicate``)
            let inline ``innerExceptions``(``this``:``System``.``AggregateException``)= ``this``.``InnerExceptions``
            let inline ``message``(``this``:``System``.``AggregateException``)= ``this``.``Message``
            let inline ``ofArray``(``innerExceptions``:``System``.``Exception``[])= new ``System``.``AggregateException``(``innerExceptions``)
            let inline ``ofSeq``(``innerExceptions``:``System``.``Collections``.``Generic``.``IEnumerable``<``System``.``Exception``>)= new ``System``.``AggregateException``(``innerExceptions``)
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``AggregateException``(``message``)
            let inline ``toString``(``this``:``System``.``AggregateException``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``AppDomain`` =
        begin
            let inline (|``IsFullyTrusted``|_|)(``this``:``System``.``AppDomain``)= if ``this``.``IsFullyTrusted`` then Some() else None
            let inline (|``IsHomogenous``|_|)(``this``:``System``.``AppDomain``)= if ``this``.``IsHomogenous`` then Some() else None
            let inline (|``ShadowCopyFiles``|_|)(``this``:``System``.``AppDomain``)= if ``this``.``ShadowCopyFiles`` then Some() else None
            [<``System``.``ObsoleteAttribute``(@"AppDomain.AppendPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead. https://go.microsoft.com/fwlink/?linkid=14202")>]
            let inline ``appendPrivatePath``(``path``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``AppendPrivatePath``(``path``)
            let inline ``applyPolicy``(``assemblyName``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``ApplyPolicy``(``assemblyName``)
            let inline ``baseDirectory``(``this``:``System``.``AppDomain``)= ``this``.``BaseDirectory``
            [<``System``.``ObsoleteAttribute``(@"AppDomain.ClearPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead. https://go.microsoft.com/fwlink/?linkid=14202")>]
            let inline ``clearPrivatePath``(``this``:``System``.``AppDomain``)= ``this``.``ClearPrivatePath``()
            [<``System``.``ObsoleteAttribute``(@"AppDomain.ClearShadowCopyPath has been deprecated. Please investigate the use of AppDomainSetup.ShadowCopyDirectories instead. https://go.microsoft.com/fwlink/?linkid=14202")>]
            let inline ``clearShadowCopyPath``(``this``:``System``.``AppDomain``)= ``this``.``ClearShadowCopyPath``()
            let inline ``createInstance``(``assemblyName``:``System``.``String``)(``typeName``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``CreateInstance``(``assemblyName``,``typeName``)
            let inline ``createInstanceAndUnwrap``(``assemblyName``:``System``.``String``)(``typeName``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``CreateInstanceAndUnwrap``(``assemblyName``,``typeName``)
            let inline ``createInstanceFrom``(``assemblyFile``:``System``.``String``)(``typeName``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``CreateInstanceFrom``(``assemblyFile``,``typeName``)
            let inline ``createInstanceFromAndUnwrap``(``assemblyFile``:``System``.``String``)(``typeName``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``CreateInstanceFromAndUnwrap``(``assemblyFile``,``typeName``)
            let inline ``dynamicDirectory``(``this``:``System``.``AppDomain``)= ``this``.``DynamicDirectory``
            let inline ``executeAssembly``(``assemblyFile``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``ExecuteAssembly``(``assemblyFile``)
            let inline ``executeAssemblyByName``(``assemblyName``:``System``.``Reflection``.``AssemblyName``)(``args``:``System``.``String``[])(``this``:``System``.``AppDomain``)= ``this``.``ExecuteAssemblyByName``(``assemblyName``,``args``)
            let inline ``friendlyName``(``this``:``System``.``AppDomain``)= ``this``.``FriendlyName``
            let inline ``getAssemblies``(``this``:``System``.``AppDomain``)= ``this``.``GetAssemblies``()
            let inline ``getData``(``name``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``GetData``(``name``)
            let inline ``id``(``this``:``System``.``AppDomain``)= ``this``.``Id``
            let inline ``isCompatibilitySwitchSet``(``value``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``IsCompatibilitySwitchSet``(``value``)
            let inline ``isDefaultAppDomain``(``this``:``System``.``AppDomain``)= ``this``.``IsDefaultAppDomain``()
            let inline ``isFinalizingForUnload``(``this``:``System``.``AppDomain``)= ``this``.``IsFinalizingForUnload``()
            let inline ``load``(``rawAssembly``:``System``.``Byte``[])(``this``:``System``.``AppDomain``)= ``this``.``Load``(``rawAssembly``)
            let inline ``monitoringSurvivedMemorySize``(``this``:``System``.``AppDomain``)= ``this``.``MonitoringSurvivedMemorySize``
            let inline ``monitoringTotalAllocatedMemorySize``(``this``:``System``.``AppDomain``)= ``this``.``MonitoringTotalAllocatedMemorySize``
            let inline ``monitoringTotalProcessorTime``(``this``:``System``.``AppDomain``)= ``this``.``MonitoringTotalProcessorTime``
            let inline ``permissionSet``(``this``:``System``.``AppDomain``)= ``this``.``PermissionSet``
            let inline ``reflectionOnlyGetAssemblies``(``this``:``System``.``AppDomain``)= ``this``.``ReflectionOnlyGetAssemblies``()
            let inline ``relativeSearchPath``(``this``:``System``.``AppDomain``)= ``this``.``RelativeSearchPath``
            [<``System``.``ObsoleteAttribute``(@"AppDomain.SetCachePath has been deprecated. Please investigate the use of AppDomainSetup.CachePath instead. https://go.microsoft.com/fwlink/?linkid=14202")>]
            let inline ``setCachePath``(``path``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``SetCachePath``(``path``)
            let inline ``setData``(``name``:``System``.``String``)(``data``:``System``.``Object``)(``this``:``System``.``AppDomain``)= ``this``.``SetData``(``name``,``data``)
            [<``System``.``ObsoleteAttribute``(@"AppDomain.SetDynamicBase has been deprecated. Please investigate the use of AppDomainSetup.DynamicBase instead. https://go.microsoft.com/fwlink/?linkid=14202")>]
            let inline ``setDynamicBase``(``path``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``SetDynamicBase``(``path``)
            let inline ``setPrincipalPolicy``(``policy``:``System``.``Security``.``Principal``.``PrincipalPolicy``)(``this``:``System``.``AppDomain``)= ``this``.``SetPrincipalPolicy``(``policy``)
            [<``System``.``ObsoleteAttribute``(@"AppDomain.SetShadowCopyFiles has been deprecated. Please investigate the use of AppDomainSetup.ShadowCopyFiles instead. https://go.microsoft.com/fwlink/?linkid=14202")>]
            let inline ``setShadowCopyFiles``(``this``:``System``.``AppDomain``)= ``this``.``SetShadowCopyFiles``()
            [<``System``.``ObsoleteAttribute``(@"AppDomain.SetShadowCopyPath has been deprecated. Please investigate the use of AppDomainSetup.ShadowCopyDirectories instead. https://go.microsoft.com/fwlink/?linkid=14202")>]
            let inline ``setShadowCopyPath``(``path``:``System``.``String``)(``this``:``System``.``AppDomain``)= ``this``.``SetShadowCopyPath``(``path``)
            let inline ``setThreadPrincipal``(``principal``:``System``.``Security``.``Principal``.``IPrincipal``)(``this``:``System``.``AppDomain``)= ``this``.``SetThreadPrincipal``(``principal``)
            let inline ``setupInformation``(``this``:``System``.``AppDomain``)= ``this``.``SetupInformation``
            let inline ``toString``(``this``:``System``.``AppDomain``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``AppDomainSetup`` =
        begin
            let inline ``applicationBase``(``this``:``System``.``AppDomainSetup``)= ``this``.``ApplicationBase``
            let inline ``targetFrameworkName``(``this``:``System``.``AppDomainSetup``)= ``this``.``TargetFrameworkName``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``AppDomainUnloadedException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``AppDomainUnloadedException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ApplicationException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``ApplicationException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ApplicationId`` =
        begin
            let inline ``copy``(``this``:``System``.``ApplicationId``)= ``this``.``Copy``()
            let inline ``culture``(``this``:``System``.``ApplicationId``)= ``this``.``Culture``
            let inline ``equals``(``o``:``System``.``Object``)(``this``:``System``.``ApplicationId``)= ``this``.``Equals``(``o``)
            let inline ``getHashCode``(``this``:``System``.``ApplicationId``)= ``this``.``GetHashCode``()
            let inline ``name``(``this``:``System``.``ApplicationId``)= ``this``.``Name``
            let inline ``processorArchitecture``(``this``:``System``.``ApplicationId``)= ``this``.``ProcessorArchitecture``
            let inline ``publicKeyToken``(``this``:``System``.``ApplicationId``)= ``this``.``PublicKeyToken``
            let inline ``toString``(``this``:``System``.``ApplicationId``)= ``this``.``ToString``()
            let inline ``version``(``this``:``System``.``ApplicationId``)= ``this``.``Version``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ArgumentException`` =
        begin
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``ArgumentException``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``message``(``this``:``System``.``ArgumentException``)= ``this``.``Message``
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``ArgumentException``(``message``)
            let inline ``paramName``(``this``:``System``.``ArgumentException``)= ``this``.``ParamName``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ArgumentNullException`` =
        begin
            let inline ``ofString``(``paramName``:``System``.``String``)= new ``System``.``ArgumentNullException``(``paramName``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ArgumentOutOfRangeException`` =
        begin
            let inline ``actualValue``(``this``:``System``.``ArgumentOutOfRangeException``)= ``this``.``ActualValue``
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``ArgumentOutOfRangeException``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``message``(``this``:``System``.``ArgumentOutOfRangeException``)= ``this``.``Message``
            let inline ``ofString``(``paramName``:``System``.``String``)= new ``System``.``ArgumentOutOfRangeException``(``paramName``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ArithmeticException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``ArithmeticException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Array`` =
        begin
            let inline (|``IsFixedSize``|_|)(``this``:``System``.``Array``)= if ``this``.``IsFixedSize`` then Some() else None
            let inline (|``IsReadOnly``|_|)(``this``:``System``.``Array``)= if ``this``.``IsReadOnly`` then Some() else None
            let inline (|``IsSynchronized``|_|)(``this``:``System``.``Array``)= if ``this``.``IsSynchronized`` then Some() else None
            let inline ``clone``(``this``:``System``.``Array``)= ``this``.``Clone``()
            let inline ``copyTo``(``array``:``System``.``Array``)(``index``:``System``.``Int32``)(``this``:``System``.``Array``)= ``this``.``CopyTo``(``array``,``index``)
            let inline ``getEnumerator``(``this``:``System``.``Array``)= ``this``.``GetEnumerator``()
            let inline ``getLength``(``dimension``:``System``.``Int32``)(``this``:``System``.``Array``)= ``this``.``GetLength``(``dimension``)
            let inline ``getLongLength``(``dimension``:``System``.``Int32``)(``this``:``System``.``Array``)= ``this``.``GetLongLength``(``dimension``)
            let inline ``getLowerBound``(``dimension``:``System``.``Int32``)(``this``:``System``.``Array``)= ``this``.``GetLowerBound``(``dimension``)
            let inline ``getUpperBound``(``dimension``:``System``.``Int32``)(``this``:``System``.``Array``)= ``this``.``GetUpperBound``(``dimension``)
            let inline ``getValue``(``index``:``System``.``Int32``)(``this``:``System``.``Array``)= ``this``.``GetValue``(``index``)
            let inline ``initialize``(``this``:``System``.``Array``)= ``this``.``Initialize``()
            let inline ``length``(``this``:``System``.``Array``)= ``this``.``Length``
            let inline ``longLength``(``this``:``System``.``Array``)= ``this``.``LongLength``
            let inline ``rank``(``this``:``System``.``Array``)= ``this``.``Rank``
            let inline ``setValue``(``value``:``System``.``Object``)(``index``:``System``.``Int32``)(``this``:``System``.``Array``)= ``this``.``SetValue``(``value``,``index``)
            let inline ``syncRoot``(``this``:``System``.``Array``)= ``this``.``SyncRoot``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ArraySegment`` =
        begin
            let inline ``array``(``this``:``System``.``ArraySegment``<'``T``>)= ``this``.``Array``
            let inline ``copyTo``(``destination``:``System``.``ArraySegment``<'``T``>)(``this``:``System``.``ArraySegment``<'``T``>)= ``this``.``CopyTo``(``destination``)
            let inline ``count``(``this``:``System``.``ArraySegment``<'``T``>)= ``this``.``Count``
            let inline ``equals``(``obj``:``System``.``ArraySegment``<'``T``>)(``this``:``System``.``ArraySegment``<'``T``>)= ``this``.``Equals``(``obj``)
            let inline ``getEnumerator``(``this``:``System``.``ArraySegment``<'``T``>)= ``this``.``GetEnumerator``()
            let inline ``getHashCode``(``this``:``System``.``ArraySegment``<'``T``>)= ``this``.``GetHashCode``()
            let inline ``ofArray``(``array``:'``T``[])= new ``System``.``ArraySegment``<'``T``>(``array``)
            let inline ``offset``(``this``:``System``.``ArraySegment``<'``T``>)= ``this``.``Offset``
            let inline ``slice``(``index``:``System``.``Int32``)(``this``:``System``.``ArraySegment``<'``T``>)= ``this``.``Slice``(``index``)
            let inline ``toArray``(``this``:``System``.``ArraySegment``<'``T``>)= ``this``.``ToArray``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ArrayTypeMismatchException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``ArrayTypeMismatchException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``AssemblyLoadEventArgs`` =
        begin
            let inline ``loadedAssembly``(``this``:``System``.``AssemblyLoadEventArgs``)= ``this``.``LoadedAssembly``
            let inline ``ofAssembly``(``loadedAssembly``:``System``.``Reflection``.``Assembly``)= new ``System``.``AssemblyLoadEventArgs``(``loadedAssembly``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Attribute`` =
        begin
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``Attribute``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Attribute``)= ``this``.``GetHashCode``()
            let inline ``isDefaultAttribute``(``this``:``System``.``Attribute``)= ``this``.``IsDefaultAttribute``()
            let inline ``match``(``obj``:``System``.``Object``)(``this``:``System``.``Attribute``)= ``this``.``Match``(``obj``)
            let inline ``typeId``(``this``:``System``.``Attribute``)= ``this``.``TypeId``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``AttributeUsageAttribute`` =
        begin
            let inline ``ofAttributeTargets``(``validOn``:``System``.``AttributeTargets``)= new ``System``.``AttributeUsageAttribute``(``validOn``)
            let inline ``validOn``(``this``:``System``.``AttributeUsageAttribute``)= ``this``.``ValidOn``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``BadImageFormatException`` =
        begin
            let inline ``fileName``(``this``:``System``.``BadImageFormatException``)= ``this``.``FileName``
            let inline ``fusionLog``(``this``:``System``.``BadImageFormatException``)= ``this``.``FusionLog``
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``BadImageFormatException``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``message``(``this``:``System``.``BadImageFormatException``)= ``this``.``Message``
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``BadImageFormatException``(``message``)
            let inline ``toString``(``this``:``System``.``BadImageFormatException``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Boolean`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Boolean``)(``this``:``System``.``Boolean``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Boolean``)(``this``:``System``.``Boolean``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Boolean``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``Boolean``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``Boolean``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Byte`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Byte``)(``this``:``System``.``Byte``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Byte``)(``this``:``System``.``Byte``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Byte``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``Byte``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``Byte``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``CLSCompliantAttribute`` =
        begin
            let inline (|``IsCompliant``|_|)(``this``:``System``.``CLSCompliantAttribute``)= if ``this``.``IsCompliant`` then Some() else None
            let inline ``ofBoolean``(``isCompliant``:``System``.``Boolean``)= new ``System``.``CLSCompliantAttribute``(``isCompliant``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``CannotUnloadAppDomainException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``CannotUnloadAppDomainException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Char`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Char``)(``this``:``System``.``Char``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Char``)(``this``:``System``.``Char``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Char``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``Char``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``Char``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``CharEnumerator`` =
        begin
            let inline ``clone``(``this``:``System``.``CharEnumerator``)= ``this``.``Clone``()
            let inline ``current``(``this``:``System``.``CharEnumerator``)= ``this``.``Current``
            let inline ``dispose``(``this``:``System``.``CharEnumerator``)= ``this``.``Dispose``()
            let inline ``moveNext``(``this``:``System``.``CharEnumerator``)= ``this``.``MoveNext``()
            let inline ``reset``(``this``:``System``.``CharEnumerator``)= ``this``.``Reset``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ConsoleCancelEventArgs`` =
        begin
            let inline ``specialKey``(``this``:``System``.``ConsoleCancelEventArgs``)= ``this``.``SpecialKey``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ConsoleKeyInfo`` =
        begin
            let inline ``equals``(``obj``:``System``.``ConsoleKeyInfo``)(``this``:``System``.``ConsoleKeyInfo``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``ConsoleKeyInfo``)= ``this``.``GetHashCode``()
            let inline ``key``(``this``:``System``.``ConsoleKeyInfo``)= ``this``.``Key``
            let inline ``keyChar``(``this``:``System``.``ConsoleKeyInfo``)= ``this``.``KeyChar``
            let inline ``modifiers``(``this``:``System``.``ConsoleKeyInfo``)= ``this``.``Modifiers``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ContextMarshalException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``ContextMarshalException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``DBNull`` =
        begin
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``DBNull``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``getTypeCode``(``this``:``System``.``DBNull``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``DBNull``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``DataMisalignedException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``DataMisalignedException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``DateTime`` =
        begin
            let inline ``add``(``value``:``System``.``TimeSpan``)(``this``:``System``.``DateTime``)= ``this``.``Add``(``value``)
            let inline ``addDays``(``value``:``System``.``Double``)(``this``:``System``.``DateTime``)= ``this``.``AddDays``(``value``)
            let inline ``addHours``(``value``:``System``.``Double``)(``this``:``System``.``DateTime``)= ``this``.``AddHours``(``value``)
            let inline ``addMilliseconds``(``value``:``System``.``Double``)(``this``:``System``.``DateTime``)= ``this``.``AddMilliseconds``(``value``)
            let inline ``addMinutes``(``value``:``System``.``Double``)(``this``:``System``.``DateTime``)= ``this``.``AddMinutes``(``value``)
            let inline ``addMonths``(``months``:``System``.``Int32``)(``this``:``System``.``DateTime``)= ``this``.``AddMonths``(``months``)
            let inline ``addSeconds``(``value``:``System``.``Double``)(``this``:``System``.``DateTime``)= ``this``.``AddSeconds``(``value``)
            let inline ``addTicks``(``value``:``System``.``Int64``)(``this``:``System``.``DateTime``)= ``this``.``AddTicks``(``value``)
            let inline ``addYears``(``value``:``System``.``Int32``)(``this``:``System``.``DateTime``)= ``this``.``AddYears``(``value``)
            let inline ``compareTo``(``value``:``System``.``DateTime``)(``this``:``System``.``DateTime``)= ``this``.``CompareTo``(``value``)
            let inline ``date``(``this``:``System``.``DateTime``)= ``this``.``Date``
            let inline ``day``(``this``:``System``.``DateTime``)= ``this``.``Day``
            let inline ``dayOfWeek``(``this``:``System``.``DateTime``)= ``this``.``DayOfWeek``
            let inline ``dayOfYear``(``this``:``System``.``DateTime``)= ``this``.``DayOfYear``
            let inline ``equals``(``value``:``System``.``DateTime``)(``this``:``System``.``DateTime``)= ``this``.``Equals``(``value``)
            let inline ``getDateTimeFormats``(``this``:``System``.``DateTime``)= ``this``.``GetDateTimeFormats``()
            let inline ``getHashCode``(``this``:``System``.``DateTime``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``DateTime``)= ``this``.``GetTypeCode``()
            let inline ``hour``(``this``:``System``.``DateTime``)= ``this``.``Hour``
            let inline ``isDaylightSavingTime``(``this``:``System``.``DateTime``)= ``this``.``IsDaylightSavingTime``()
            let inline ``kind``(``this``:``System``.``DateTime``)= ``this``.``Kind``
            let inline ``millisecond``(``this``:``System``.``DateTime``)= ``this``.``Millisecond``
            let inline ``minute``(``this``:``System``.``DateTime``)= ``this``.``Minute``
            let inline ``month``(``this``:``System``.``DateTime``)= ``this``.``Month``
            let inline ``ofInt64``(``ticks``:``System``.``Int64``)= new ``System``.``DateTime``(``ticks``)
            let inline ``second``(``this``:``System``.``DateTime``)= ``this``.``Second``
            let inline ``subtract``(``value``:``System``.``DateTime``)(``this``:``System``.``DateTime``)= ``this``.``Subtract``(``value``)
            let inline ``ticks``(``this``:``System``.``DateTime``)= ``this``.``Ticks``
            let inline ``timeOfDay``(``this``:``System``.``DateTime``)= ``this``.``TimeOfDay``
            let inline ``toBinary``(``this``:``System``.``DateTime``)= ``this``.``ToBinary``()
            let inline ``toFileTime``(``this``:``System``.``DateTime``)= ``this``.``ToFileTime``()
            let inline ``toFileTimeUtc``(``this``:``System``.``DateTime``)= ``this``.``ToFileTimeUtc``()
            let inline ``toLocalTime``(``this``:``System``.``DateTime``)= ``this``.``ToLocalTime``()
            let inline ``toLongDateString``(``this``:``System``.``DateTime``)= ``this``.``ToLongDateString``()
            let inline ``toLongTimeString``(``this``:``System``.``DateTime``)= ``this``.``ToLongTimeString``()
            let inline ``toOADate``(``this``:``System``.``DateTime``)= ``this``.``ToOADate``()
            let inline ``toShortDateString``(``this``:``System``.``DateTime``)= ``this``.``ToShortDateString``()
            let inline ``toShortTimeString``(``this``:``System``.``DateTime``)= ``this``.``ToShortTimeString``()
            let inline ``toString``(``this``:``System``.``DateTime``)= ``this``.``ToString``()
            let inline ``toUniversalTime``(``this``:``System``.``DateTime``)= ``this``.``ToUniversalTime``()
            let inline ``year``(``this``:``System``.``DateTime``)= ``this``.``Year``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``DateTimeOffset`` =
        begin
            let inline ``add``(``timeSpan``:``System``.``TimeSpan``)(``this``:``System``.``DateTimeOffset``)= ``this``.``Add``(``timeSpan``)
            let inline ``addDays``(``days``:``System``.``Double``)(``this``:``System``.``DateTimeOffset``)= ``this``.``AddDays``(``days``)
            let inline ``addHours``(``hours``:``System``.``Double``)(``this``:``System``.``DateTimeOffset``)= ``this``.``AddHours``(``hours``)
            let inline ``addMilliseconds``(``milliseconds``:``System``.``Double``)(``this``:``System``.``DateTimeOffset``)= ``this``.``AddMilliseconds``(``milliseconds``)
            let inline ``addMinutes``(``minutes``:``System``.``Double``)(``this``:``System``.``DateTimeOffset``)= ``this``.``AddMinutes``(``minutes``)
            let inline ``addMonths``(``months``:``System``.``Int32``)(``this``:``System``.``DateTimeOffset``)= ``this``.``AddMonths``(``months``)
            let inline ``addSeconds``(``seconds``:``System``.``Double``)(``this``:``System``.``DateTimeOffset``)= ``this``.``AddSeconds``(``seconds``)
            let inline ``addTicks``(``ticks``:``System``.``Int64``)(``this``:``System``.``DateTimeOffset``)= ``this``.``AddTicks``(``ticks``)
            let inline ``addYears``(``years``:``System``.``Int32``)(``this``:``System``.``DateTimeOffset``)= ``this``.``AddYears``(``years``)
            let inline ``compareTo``(``other``:``System``.``DateTimeOffset``)(``this``:``System``.``DateTimeOffset``)= ``this``.``CompareTo``(``other``)
            let inline ``date``(``this``:``System``.``DateTimeOffset``)= ``this``.``Date``
            let inline ``dateTime``(``this``:``System``.``DateTimeOffset``)= ``this``.``DateTime``
            let inline ``day``(``this``:``System``.``DateTimeOffset``)= ``this``.``Day``
            let inline ``dayOfWeek``(``this``:``System``.``DateTimeOffset``)= ``this``.``DayOfWeek``
            let inline ``dayOfYear``(``this``:``System``.``DateTimeOffset``)= ``this``.``DayOfYear``
            let inline ``equals``(``other``:``System``.``DateTimeOffset``)(``this``:``System``.``DateTimeOffset``)= ``this``.``Equals``(``other``)
            let inline ``equalsExact``(``other``:``System``.``DateTimeOffset``)(``this``:``System``.``DateTimeOffset``)= ``this``.``EqualsExact``(``other``)
            let inline ``getHashCode``(``this``:``System``.``DateTimeOffset``)= ``this``.``GetHashCode``()
            let inline ``hour``(``this``:``System``.``DateTimeOffset``)= ``this``.``Hour``
            let inline ``localDateTime``(``this``:``System``.``DateTimeOffset``)= ``this``.``LocalDateTime``
            let inline ``millisecond``(``this``:``System``.``DateTimeOffset``)= ``this``.``Millisecond``
            let inline ``minute``(``this``:``System``.``DateTimeOffset``)= ``this``.``Minute``
            let inline ``month``(``this``:``System``.``DateTimeOffset``)= ``this``.``Month``
            let inline ``ofDateTime``(``dateTime``:``System``.``DateTime``)= new ``System``.``DateTimeOffset``(``dateTime``)
            let inline ``offset``(``this``:``System``.``DateTimeOffset``)= ``this``.``Offset``
            let inline ``second``(``this``:``System``.``DateTimeOffset``)= ``this``.``Second``
            let inline ``subtract``(``value``:``System``.``DateTimeOffset``)(``this``:``System``.``DateTimeOffset``)= ``this``.``Subtract``(``value``)
            let inline ``ticks``(``this``:``System``.``DateTimeOffset``)= ``this``.``Ticks``
            let inline ``timeOfDay``(``this``:``System``.``DateTimeOffset``)= ``this``.``TimeOfDay``
            let inline ``toFileTime``(``this``:``System``.``DateTimeOffset``)= ``this``.``ToFileTime``()
            let inline ``toLocalTime``(``this``:``System``.``DateTimeOffset``)= ``this``.``ToLocalTime``()
            let inline ``toOffset``(``offset``:``System``.``TimeSpan``)(``this``:``System``.``DateTimeOffset``)= ``this``.``ToOffset``(``offset``)
            let inline ``toString``(``this``:``System``.``DateTimeOffset``)= ``this``.``ToString``()
            let inline ``toUniversalTime``(``this``:``System``.``DateTimeOffset``)= ``this``.``ToUniversalTime``()
            let inline ``toUnixTimeMilliseconds``(``this``:``System``.``DateTimeOffset``)= ``this``.``ToUnixTimeMilliseconds``()
            let inline ``toUnixTimeSeconds``(``this``:``System``.``DateTimeOffset``)= ``this``.``ToUnixTimeSeconds``()
            let inline ``utcDateTime``(``this``:``System``.``DateTimeOffset``)= ``this``.``UtcDateTime``
            let inline ``utcTicks``(``this``:``System``.``DateTimeOffset``)= ``this``.``UtcTicks``
            let inline ``year``(``this``:``System``.``DateTimeOffset``)= ``this``.``Year``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Decimal`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Decimal``)(``this``:``System``.``Decimal``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``value``:``System``.``Decimal``)(``this``:``System``.``Decimal``)= ``this``.``Equals``(``value``)
            let inline ``getHashCode``(``this``:``System``.``Decimal``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``Decimal``)= ``this``.``GetTypeCode``()
            let inline ``ofArray``(``bits``:``System``.``Int32``[])= new ``System``.``Decimal``(``bits``)
            let inline ``ofDouble``(``value``:``System``.``Double``)= new ``System``.``Decimal``(``value``)
            let inline ``ofInt32``(``value``:``System``.``Int32``)= new ``System``.``Decimal``(``value``)
            let inline ``ofInt64``(``value``:``System``.``Int64``)= new ``System``.``Decimal``(``value``)
            let inline ``ofSingle``(``value``:``System``.``Single``)= new ``System``.``Decimal``(``value``)
            let inline ``ofUInt32``(``value``:``System``.``UInt32``)= new ``System``.``Decimal``(``value``)
            let inline ``ofUInt64``(``value``:``System``.``UInt64``)= new ``System``.``Decimal``(``value``)
            let inline ``toString``(``this``:``System``.``Decimal``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Delegate`` =
        begin
            let inline ``clone``(``this``:``System``.``Delegate``)= ``this``.``Clone``()
            let inline ``dynamicInvoke``(``args``:``System``.``Object``[])(``this``:``System``.``Delegate``)= ``this``.``DynamicInvoke``(``args``)
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``Delegate``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Delegate``)= ``this``.``GetHashCode``()
            let inline ``getInvocationList``(``this``:``System``.``Delegate``)= ``this``.``GetInvocationList``()
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``Delegate``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``method``(``this``:``System``.``Delegate``)= ``this``.``Method``
            let inline ``target``(``this``:``System``.``Delegate``)= ``this``.``Target``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``DivideByZeroException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``DivideByZeroException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``DllNotFoundException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``DllNotFoundException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Double`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Double``)(``this``:``System``.``Double``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Double``)(``this``:``System``.``Double``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Double``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``Double``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``Double``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``DuplicateWaitObjectException`` =
        begin
            let inline ``ofString``(``parameterName``:``System``.``String``)= new ``System``.``DuplicateWaitObjectException``(``parameterName``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``EntryPointNotFoundException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``EntryPointNotFoundException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Enum`` =
        begin
            let inline ``compareTo``(``target``:``System``.``Object``)(``this``:``System``.``Enum``)= ``this``.``CompareTo``(``target``)
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``Enum``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Enum``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``Enum``)= ``this``.``GetTypeCode``()
            let inline ``hasFlag``(``flag``:``System``.``Enum``)(``this``:``System``.``Enum``)= ``this``.``HasFlag``(``flag``)
            let inline ``toString``(``this``:``System``.``Enum``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Exception`` =
        begin
            let inline ``data``(``this``:``System``.``Exception``)= ``this``.``Data``
            let inline ``getBaseException``(``this``:``System``.``Exception``)= ``this``.``GetBaseException``()
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``Exception``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``getType``(``this``:``System``.``Exception``)= ``this``.``GetType``()
            let inline ``innerException``(``this``:``System``.``Exception``)= ``this``.``InnerException``
            let inline ``message``(``this``:``System``.``Exception``)= ``this``.``Message``
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``Exception``(``message``)
            let inline ``stackTrace``(``this``:``System``.``Exception``)= ``this``.``StackTrace``
            let inline ``targetSite``(``this``:``System``.``Exception``)= ``this``.``TargetSite``
            let inline ``toString``(``this``:``System``.``Exception``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    [<``System``.``ObsoleteAttribute``(@"This type previously indicated an unspecified fatal error in the runtime. The runtime no longer raises this exception so this type is obsolete.")>]
    module ``ExecutionEngineException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``ExecutionEngineException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``FieldAccessException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``FieldAccessException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``FormatException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``FormatException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``FormattableString`` =
        begin
            let inline ``argumentCount``(``this``:``System``.``FormattableString``)= ``this``.``ArgumentCount``
            let inline ``format``(``this``:``System``.``FormattableString``)= ``this``.``Format``
            let inline ``getArgument``(``index``:``System``.``Int32``)(``this``:``System``.``FormattableString``)= ``this``.``GetArgument``(``index``)
            let inline ``getArguments``(``this``:``System``.``FormattableString``)= ``this``.``GetArguments``()
            let inline ``toString``(``this``:``System``.``FormattableString``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``GCMemoryInfo`` =
        begin
            let inline ``fragmentedBytes``(``this``:``System``.``GCMemoryInfo``)= ``this``.``FragmentedBytes``
            let inline ``heapSizeBytes``(``this``:``System``.``GCMemoryInfo``)= ``this``.``HeapSizeBytes``
            let inline ``highMemoryLoadThresholdBytes``(``this``:``System``.``GCMemoryInfo``)= ``this``.``HighMemoryLoadThresholdBytes``
            let inline ``memoryLoadBytes``(``this``:``System``.``GCMemoryInfo``)= ``this``.``MemoryLoadBytes``
            let inline ``totalAvailableMemoryBytes``(``this``:``System``.``GCMemoryInfo``)= ``this``.``TotalAvailableMemoryBytes``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``GenericUriParser`` =
        begin
            let inline ``ofGenericUriParserOptions``(``options``:``System``.``GenericUriParserOptions``)= new ``System``.``GenericUriParser``(``options``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IAsyncDisposable`` =
        begin
            let inline ``disposeAsync``(``this``:``System``.``IAsyncDisposable``)= ``this``.``DisposeAsync``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IAsyncResult`` =
        begin
            let inline (|``CompletedSynchronously``|_|)(``this``:``System``.``IAsyncResult``)= if ``this``.``CompletedSynchronously`` then Some() else None
            let inline (|``IsCompleted``|_|)(``this``:``System``.``IAsyncResult``)= if ``this``.``IsCompleted`` then Some() else None
            let inline ``asyncState``(``this``:``System``.``IAsyncResult``)= ``this``.``AsyncState``
            let inline ``asyncWaitHandle``(``this``:``System``.``IAsyncResult``)= ``this``.``AsyncWaitHandle``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ICloneable`` =
        begin
            let inline ``clone``(``this``:``System``.``ICloneable``)= ``this``.``Clone``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IComparable`` =
        begin
            let inline ``compareTo``(``other``:'``T``)(``this``:``System``.``IComparable``<'``T``>)= ``this``.``CompareTo``(``other``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IConvertible`` =
        begin
            let inline ``getTypeCode``(``this``:``System``.``IConvertible``)= ``this``.``GetTypeCode``()
            let inline ``toBoolean``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToBoolean``(``provider``)
            let inline ``toByte``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToByte``(``provider``)
            let inline ``toChar``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToChar``(``provider``)
            let inline ``toDateTime``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToDateTime``(``provider``)
            let inline ``toDecimal``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToDecimal``(``provider``)
            let inline ``toDouble``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToDouble``(``provider``)
            let inline ``toInt16``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToInt16``(``provider``)
            let inline ``toInt32``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToInt32``(``provider``)
            let inline ``toInt64``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToInt64``(``provider``)
            let inline ``toSByte``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToSByte``(``provider``)
            let inline ``toSingle``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToSingle``(``provider``)
            let inline ``toString``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToString``(``provider``)
            let inline ``toType``(``conversionType``:``System``.``Type``)(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToType``(``conversionType``,``provider``)
            let inline ``toUInt16``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToUInt16``(``provider``)
            let inline ``toUInt32``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToUInt32``(``provider``)
            let inline ``toUInt64``(``provider``:``System``.``IFormatProvider``)(``this``:``System``.``IConvertible``)= ``this``.``ToUInt64``(``provider``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ICustomFormatter`` =
        begin
            let inline ``format``(``format``:``System``.``String``)(``arg``:``System``.``Object``)(``formatProvider``:``System``.``IFormatProvider``)(``this``:``System``.``ICustomFormatter``)= ``this``.``Format``(``format``,``arg``,``formatProvider``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IDisposable`` =
        begin
            let inline ``dispose``(``this``:``System``.``IDisposable``)= ``this``.``Dispose``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IEquatable`` =
        begin
            let inline ``equals``(``other``:'``T``)(``this``:``System``.``IEquatable``<'``T``>)= ``this``.``Equals``(``other``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IFormatProvider`` =
        begin
            let inline ``getFormat``(``formatType``:``System``.``Type``)(``this``:``System``.``IFormatProvider``)= ``this``.``GetFormat``(``formatType``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IFormattable`` =
        begin
            let inline ``toString``(``format``:``System``.``String``)(``formatProvider``:``System``.``IFormatProvider``)(``this``:``System``.``IFormattable``)= ``this``.``ToString``(``format``,``formatProvider``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IObservable`` =
        begin
            let inline ``subscribe``(``observer``:``System``.``IObserver``<'``T``>)(``this``:``System``.``IObservable``<'``T``>)= ``this``.``Subscribe``(``observer``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IObserver`` =
        begin
            let inline ``onCompleted``(``this``:``System``.``IObserver``<'``T``>)= ``this``.``OnCompleted``()
            let inline ``onError``(``error``:``System``.``Exception``)(``this``:``System``.``IObserver``<'``T``>)= ``this``.``OnError``(``error``)
            let inline ``onNext``(``value``:'``T``)(``this``:``System``.``IObserver``<'``T``>)= ``this``.``OnNext``(``value``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IProgress`` =
        begin
            let inline ``report``(``value``:'``T``)(``this``:``System``.``IProgress``<'``T``>)= ``this``.``Report``(``value``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IServiceProvider`` =
        begin
            let inline ``getService``(``serviceType``:``System``.``Type``)(``this``:``System``.``IServiceProvider``)= ``this``.``GetService``(``serviceType``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Index`` =
        begin
            let inline (|``IsFromEnd``|_|)(``this``:``System``.``Index``)= if ``this``.``IsFromEnd`` then Some() else None
            let inline ``equals``(``other``:``System``.``Index``)(``this``:``System``.``Index``)= ``this``.``Equals``(``other``)
            let inline ``getHashCode``(``this``:``System``.``Index``)= ``this``.``GetHashCode``()
            let inline ``getOffset``(``length``:``System``.``Int32``)(``this``:``System``.``Index``)= ``this``.``GetOffset``(``length``)
            let inline ``toString``(``this``:``System``.``Index``)= ``this``.``ToString``()
            let inline ``value``(``this``:``System``.``Index``)= ``this``.``Value``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IndexOutOfRangeException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``IndexOutOfRangeException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``InsufficientExecutionStackException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``InsufficientExecutionStackException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``InsufficientMemoryException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``InsufficientMemoryException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Int16`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Int16``)(``this``:``System``.``Int16``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Int16``)(``this``:``System``.``Int16``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Int16``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``Int16``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``Int16``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Int32`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Int32``)(``this``:``System``.``Int32``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Int32``)(``this``:``System``.``Int32``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Int32``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``Int32``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``Int32``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Int64`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Int64``)(``this``:``System``.``Int64``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Int64``)(``this``:``System``.``Int64``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Int64``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``Int64``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``Int64``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``IntPtr`` =
        begin
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``IntPtr``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``IntPtr``)= ``this``.``GetHashCode``()
            let inline ``ofInt32``(``value``:``System``.``Int32``)= new ``System``.``IntPtr``(``value``)
            let inline ``ofInt64``(``value``:``System``.``Int64``)= new ``System``.``IntPtr``(``value``)
            let inline ``toInt32``(``this``:``System``.``IntPtr``)= ``this``.``ToInt32``()
            let inline ``toInt64``(``this``:``System``.``IntPtr``)= ``this``.``ToInt64``()
            let inline ``toPointer``(``this``:``System``.``IntPtr``)= ``this``.``ToPointer``()
            let inline ``toString``(``this``:``System``.``IntPtr``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``InvalidCastException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``InvalidCastException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``InvalidOperationException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``InvalidOperationException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``InvalidProgramException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``InvalidProgramException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``InvalidTimeZoneException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``InvalidTimeZoneException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Lazy`` =
        begin
            let inline (|``IsValueCreated``|_|)(``this``:``System``.``Lazy``<'``T``>)= if ``this``.``IsValueCreated`` then Some() else None
            let inline ``metadata``(``this``:``System``.``Lazy``<'``T``,'``TMetadata``>)= ``this``.``Metadata``
            let inline ``ofBoolean``(``isThreadSafe``:``System``.``Boolean``)= new ``System``.``Lazy``<'``T``>(``isThreadSafe``)
            let inline ``ofFunc``(``valueFactory``:``System``.``Func``<'``T``>)= new ``System``.``Lazy``<'``T``>(``valueFactory``)
            let inline ``ofLazyThreadSafetyMode``(``mode``:``System``.``Threading``.``LazyThreadSafetyMode``)= new ``System``.``Lazy``<'``T``>(``mode``)
            let inline ``toString``(``this``:``System``.``Lazy``<'``T``>)= ``this``.``ToString``()
            let inline ``value``(``this``:``System``.``Lazy``<'``T``>)= ``this``.``Value``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``LoaderOptimizationAttribute`` =
        begin
            let inline ``ofByte``(``value``:``System``.``Byte``)= new ``System``.``LoaderOptimizationAttribute``(``value``)
            let inline ``ofLoaderOptimization``(``value``:``System``.``LoaderOptimization``)= new ``System``.``LoaderOptimizationAttribute``(``value``)
            let inline ``value``(``this``:``System``.``LoaderOptimizationAttribute``)= ``this``.``Value``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``MarshalByRefObject`` =
        begin
            let inline ``getLifetimeService``(``this``:``System``.``MarshalByRefObject``)= ``this``.``GetLifetimeService``()
            let inline ``initializeLifetimeService``(``this``:``System``.``MarshalByRefObject``)= ``this``.``InitializeLifetimeService``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``MemberAccessException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``MemberAccessException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Memory`` =
        begin
            let inline (|``IsEmpty``|_|)(``this``:``System``.``Memory``<'``T``>)= if ``this``.``IsEmpty`` then Some() else None
            let inline ``copyTo``(``destination``:``System``.``Memory``<'``T``>)(``this``:``System``.``Memory``<'``T``>)= ``this``.``CopyTo``(``destination``)
            let inline ``equals``(``other``:``System``.``Memory``<'``T``>)(``this``:``System``.``Memory``<'``T``>)= ``this``.``Equals``(``other``)
            let inline ``getHashCode``(``this``:``System``.``Memory``<'``T``>)= ``this``.``GetHashCode``()
            let inline ``length``(``this``:``System``.``Memory``<'``T``>)= ``this``.``Length``
            let inline ``ofArray``(``array``:'``T``[])= new ``System``.``Memory``<'``T``>(``array``)
            let inline ``pin``(``this``:``System``.``Memory``<'``T``>)= ``this``.``Pin``()
            let inline ``slice``(``start``:``System``.``Int32``)(``this``:``System``.``Memory``<'``T``>)= ``this``.``Slice``(``start``)
            let inline ``span``(``this``:``System``.``Memory``<'``T``>)= ``this``.``Span``
            let inline ``toArray``(``this``:``System``.``Memory``<'``T``>)= ``this``.``ToArray``()
            let inline ``toString``(``this``:``System``.``Memory``<'``T``>)= ``this``.``ToString``()
            let inline ``tryCopyTo``(``destination``:``System``.``Memory``<'``T``>)(``this``:``System``.``Memory``<'``T``>)= ``this``.``TryCopyTo``(``destination``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``MethodAccessException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``MethodAccessException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``MissingFieldException`` =
        begin
            let inline ``message``(``this``:``System``.``MissingFieldException``)= ``this``.``Message``
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``MissingFieldException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``MissingMemberException`` =
        begin
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``MissingMemberException``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``message``(``this``:``System``.``MissingMemberException``)= ``this``.``Message``
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``MissingMemberException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``MissingMethodException`` =
        begin
            let inline ``message``(``this``:``System``.``MissingMethodException``)= ``this``.``Message``
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``MissingMethodException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``MulticastNotSupportedException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``MulticastNotSupportedException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``NotFiniteNumberException`` =
        begin
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``NotFiniteNumberException``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``ofDouble``(``offendingNumber``:``System``.``Double``)= new ``System``.``NotFiniteNumberException``(``offendingNumber``)
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``NotFiniteNumberException``(``message``)
            let inline ``offendingNumber``(``this``:``System``.``NotFiniteNumberException``)= ``this``.``OffendingNumber``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``NotImplementedException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``NotImplementedException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``NotSupportedException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``NotSupportedException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``NullReferenceException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``NullReferenceException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Object`` =
        begin
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``Object``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Object``)= ``this``.``GetHashCode``()
            let inline ``getType``(``this``:``System``.``Object``)= ``this``.``GetType``()
            let inline ``toString``(``this``:``System``.``Object``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ObjectDisposedException`` =
        begin
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``ObjectDisposedException``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``message``(``this``:``System``.``ObjectDisposedException``)= ``this``.``Message``
            let inline ``objectName``(``this``:``System``.``ObjectDisposedException``)= ``this``.``ObjectName``
            let inline ``ofString``(``objectName``:``System``.``String``)= new ``System``.``ObjectDisposedException``(``objectName``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ObsoleteAttribute`` =
        begin
            let inline (|``IsError``|_|)(``this``:``System``.``ObsoleteAttribute``)= if ``this``.``IsError`` then Some() else None
            let inline ``message``(``this``:``System``.``ObsoleteAttribute``)= ``this``.``Message``
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``ObsoleteAttribute``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``OperatingSystem`` =
        begin
            let inline ``clone``(``this``:``System``.``OperatingSystem``)= ``this``.``Clone``()
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``OperatingSystem``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``platform``(``this``:``System``.``OperatingSystem``)= ``this``.``Platform``
            let inline ``servicePack``(``this``:``System``.``OperatingSystem``)= ``this``.``ServicePack``
            let inline ``toString``(``this``:``System``.``OperatingSystem``)= ``this``.``ToString``()
            let inline ``version``(``this``:``System``.``OperatingSystem``)= ``this``.``Version``
            let inline ``versionString``(``this``:``System``.``OperatingSystem``)= ``this``.``VersionString``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``OperationCanceledException`` =
        begin
            let inline ``cancellationToken``(``this``:``System``.``OperationCanceledException``)= ``this``.``CancellationToken``
            let inline ``ofCancellationToken``(``token``:``System``.``Threading``.``CancellationToken``)= new ``System``.``OperationCanceledException``(``token``)
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``OperationCanceledException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``OutOfMemoryException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``OutOfMemoryException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``OverflowException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``OverflowException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``PlatformNotSupportedException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``PlatformNotSupportedException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Progress`` =
        begin
            let inline ``ofAction``(``handler``:``System``.``Action``<'``T``>)= new ``System``.``Progress``<'``T``>(``handler``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Random`` =
        begin
            let inline ``next``(``this``:``System``.``Random``)= ``this``.``Next``()
            let inline ``nextBytes``(``buffer``:``System``.``Byte``[])(``this``:``System``.``Random``)= ``this``.``NextBytes``(``buffer``)
            let inline ``nextDouble``(``this``:``System``.``Random``)= ``this``.``NextDouble``()
            let inline ``ofInt32``(``seed``:``System``.``Int32``)= new ``System``.``Random``(``seed``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Range`` =
        begin
            let inline ``end``(``this``:``System``.``Range``)= ``this``.``End``
            let inline ``equals``(``value``:``System``.``Object``)(``this``:``System``.``Range``)= ``this``.``Equals``(``value``)
            let inline ``getHashCode``(``this``:``System``.``Range``)= ``this``.``GetHashCode``()
            let inline ``getOffsetAndLength``(``length``:``System``.``Int32``)(``this``:``System``.``Range``)= ``this``.``GetOffsetAndLength``(``length``)
            let inline ``start``(``this``:``System``.``Range``)= ``this``.``Start``
            let inline ``toString``(``this``:``System``.``Range``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``RankException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``RankException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ReadOnlyMemory`` =
        begin
            let inline (|``IsEmpty``|_|)(``this``:``System``.``ReadOnlyMemory``<'``T``>)= if ``this``.``IsEmpty`` then Some() else None
            let inline ``copyTo``(``destination``:``System``.``Memory``<'``T``>)(``this``:``System``.``ReadOnlyMemory``<'``T``>)= ``this``.``CopyTo``(``destination``)
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``ReadOnlyMemory``<'``T``>)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``ReadOnlyMemory``<'``T``>)= ``this``.``GetHashCode``()
            let inline ``length``(``this``:``System``.``ReadOnlyMemory``<'``T``>)= ``this``.``Length``
            let inline ``ofArray``(``array``:'``T``[])= new ``System``.``ReadOnlyMemory``<'``T``>(``array``)
            let inline ``pin``(``this``:``System``.``ReadOnlyMemory``<'``T``>)= ``this``.``Pin``()
            let inline ``slice``(``start``:``System``.``Int32``)(``this``:``System``.``ReadOnlyMemory``<'``T``>)= ``this``.``Slice``(``start``)
            let inline ``span``(``this``:``System``.``ReadOnlyMemory``<'``T``>)= ``this``.``Span``
            let inline ``toArray``(``this``:``System``.``ReadOnlyMemory``<'``T``>)= ``this``.``ToArray``()
            let inline ``toString``(``this``:``System``.``ReadOnlyMemory``<'``T``>)= ``this``.``ToString``()
            let inline ``tryCopyTo``(``destination``:``System``.``Memory``<'``T``>)(``this``:``System``.``ReadOnlyMemory``<'``T``>)= ``this``.``TryCopyTo``(``destination``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    [<``System``.``ObsoleteAttribute``(@"Types with embedded references are not supported in this version of your compiler.",true)>]
    module ``ReadOnlySpan`` =
        begin
            let inline (|``IsEmpty``|_|)(``this``:``System``.``ReadOnlySpan``<'``T``>)= if ``this``.``IsEmpty`` then Some() else None
            let inline ``copyTo``(``destination``:``System``.``Span``<'``T``>)(``this``:``System``.``ReadOnlySpan``<'``T``>)= ``this``.``CopyTo``(``destination``)
            [<``System``.``ObsoleteAttribute``(@"Equals() on ReadOnlySpan will always throw an exception. Use == instead.")>]
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``ReadOnlySpan``<'``T``>)= ``this``.``Equals``(``obj``)
            let inline ``getEnumerator``(``this``:``System``.``ReadOnlySpan``<'``T``>)= ``this``.``GetEnumerator``()
            [<``System``.``ObsoleteAttribute``(@"GetHashCode() on ReadOnlySpan will always throw an exception.")>]
            let inline ``getHashCode``(``this``:``System``.``ReadOnlySpan``<'``T``>)= ``this``.``GetHashCode``()
            let inline ``getPinnableReference``(``this``:``System``.``ReadOnlySpan``<'``T``>)= ``this``.``GetPinnableReference``()
            let inline ``length``(``this``:``System``.``ReadOnlySpan``<'``T``>)= ``this``.``Length``
            let inline ``ofArray``(``array``:'``T``[])= new ``System``.``ReadOnlySpan``<'``T``>(``array``)
            let inline ``slice``(``start``:``System``.``Int32``)(``this``:``System``.``ReadOnlySpan``<'``T``>)= ``this``.``Slice``(``start``)
            let inline ``toArray``(``this``:``System``.``ReadOnlySpan``<'``T``>)= ``this``.``ToArray``()
            let inline ``toString``(``this``:``System``.``ReadOnlySpan``<'``T``>)= ``this``.``ToString``()
            let inline ``tryCopyTo``(``destination``:``System``.``Span``<'``T``>)(``this``:``System``.``ReadOnlySpan``<'``T``>)= ``this``.``TryCopyTo``(``destination``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ResolveEventArgs`` =
        begin
            let inline ``name``(``this``:``System``.``ResolveEventArgs``)= ``this``.``Name``
            let inline ``ofString``(``name``:``System``.``String``)= new ``System``.``ResolveEventArgs``(``name``)
            let inline ``requestingAssembly``(``this``:``System``.``ResolveEventArgs``)= ``this``.``RequestingAssembly``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``SByte`` =
        begin
            let inline ``compareTo``(``obj``:``System``.``Object``)(``this``:``System``.``SByte``)= ``this``.``CompareTo``(``obj``)
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``SByte``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``SByte``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``SByte``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``SByte``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``SequencePosition`` =
        begin
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``SequencePosition``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``SequencePosition``)= ``this``.``GetHashCode``()
            let inline ``getInteger``(``this``:``System``.``SequencePosition``)= ``this``.``GetInteger``()
            let inline ``getObject``(``this``:``System``.``SequencePosition``)= ``this``.``GetObject``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Single`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Object``)(``this``:``System``.``Single``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``Single``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Single``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``Single``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``Single``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    [<``System``.``ObsoleteAttribute``(@"Types with embedded references are not supported in this version of your compiler.",true)>]
    module ``Span`` =
        begin
            let inline (|``IsEmpty``|_|)(``this``:``System``.``Span``<'``T``>)= if ``this``.``IsEmpty`` then Some() else None
            let inline ``clear``(``this``:``System``.``Span``<'``T``>)= ``this``.``Clear``()
            let inline ``copyTo``(``destination``:``System``.``Span``<'``T``>)(``this``:``System``.``Span``<'``T``>)= ``this``.``CopyTo``(``destination``)
            [<``System``.``ObsoleteAttribute``(@"Equals() on Span will always throw an exception. Use == instead.")>]
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``Span``<'``T``>)= ``this``.``Equals``(``obj``)
            let inline ``fill``(``value``:'``T``)(``this``:``System``.``Span``<'``T``>)= ``this``.``Fill``(``value``)
            let inline ``getEnumerator``(``this``:``System``.``Span``<'``T``>)= ``this``.``GetEnumerator``()
            [<``System``.``ObsoleteAttribute``(@"GetHashCode() on Span will always throw an exception.")>]
            let inline ``getHashCode``(``this``:``System``.``Span``<'``T``>)= ``this``.``GetHashCode``()
            let inline ``getPinnableReference``(``this``:``System``.``Span``<'``T``>)= ``this``.``GetPinnableReference``()
            let inline ``length``(``this``:``System``.``Span``<'``T``>)= ``this``.``Length``
            let inline ``ofArray``(``array``:'``T``[])= new ``System``.``Span``<'``T``>(``array``)
            let inline ``slice``(``start``:``System``.``Int32``)(``this``:``System``.``Span``<'``T``>)= ``this``.``Slice``(``start``)
            let inline ``toArray``(``this``:``System``.``Span``<'``T``>)= ``this``.``ToArray``()
            let inline ``toString``(``this``:``System``.``Span``<'``T``>)= ``this``.``ToString``()
            let inline ``tryCopyTo``(``destination``:``System``.``Span``<'``T``>)(``this``:``System``.``Span``<'``T``>)= ``this``.``TryCopyTo``(``destination``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``StackOverflowException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``StackOverflowException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``String`` =
        begin
            let inline ``clone``(``this``:``System``.``String``)= ``this``.``Clone``()
            let inline ``compareTo``(``value``:``System``.``Object``)(``this``:``System``.``String``)= ``this``.``CompareTo``(``value``)
            let inline ``contains``(``value``:``System``.``Char``)(``this``:``System``.``String``)= ``this``.``Contains``(``value``)
            let inline ``copyTo``(``sourceIndex``:``System``.``Int32``)(``destination``:``System``.``Char``[])(``destinationIndex``:``System``.``Int32``)(``count``:``System``.``Int32``)(``this``:``System``.``String``)= ``this``.``CopyTo``(``sourceIndex``,``destination``,``destinationIndex``,``count``)
            let inline ``endsWith``(``value``:``System``.``Char``)(``this``:``System``.``String``)= ``this``.``EndsWith``(``value``)
            let inline ``enumerateRunes``(``this``:``System``.``String``)= ``this``.``EnumerateRunes``()
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``String``)= ``this``.``Equals``(``obj``)
            let inline ``getEnumerator``(``this``:``System``.``String``)= ``this``.``GetEnumerator``()
            let inline ``getHashCode``(``this``:``System``.``String``)= ``this``.``GetHashCode``()
            let inline ``getPinnableReference``(``this``:``System``.``String``)= ``this``.``GetPinnableReference``()
            let inline ``getTypeCode``(``this``:``System``.``String``)= ``this``.``GetTypeCode``()
            let inline ``indexOf``(``value``:``System``.``Char``)(``this``:``System``.``String``)= ``this``.``IndexOf``(``value``)
            let inline ``indexOfAny``(``anyOf``:``System``.``Char``[])(``this``:``System``.``String``)= ``this``.``IndexOfAny``(``anyOf``)
            let inline ``insert``(``startIndex``:``System``.``Int32``)(``value``:``System``.``String``)(``this``:``System``.``String``)= ``this``.``Insert``(``startIndex``,``value``)
            let inline ``isNormalized``(``this``:``System``.``String``)= ``this``.``IsNormalized``()
            let inline ``lastIndexOf``(``value``:``System``.``Char``)(``this``:``System``.``String``)= ``this``.``LastIndexOf``(``value``)
            let inline ``lastIndexOfAny``(``anyOf``:``System``.``Char``[])(``this``:``System``.``String``)= ``this``.``LastIndexOfAny``(``anyOf``)
            let inline ``length``(``this``:``System``.``String``)= ``this``.``Length``
            let inline ``normalize``(``this``:``System``.``String``)= ``this``.``Normalize``()
            let inline ``ofArray``(``value``:``System``.``Char``[])= new ``System``.``String``(``value``)
            let inline ``ofReadOnlySpan``(``value``:``System``.``ReadOnlySpan``<``System``.``Char``>)= new ``System``.``String``(``value``)
            let inline ``padLeft``(``totalWidth``:``System``.``Int32``)(``this``:``System``.``String``)= ``this``.``PadLeft``(``totalWidth``)
            let inline ``padRight``(``totalWidth``:``System``.``Int32``)(``this``:``System``.``String``)= ``this``.``PadRight``(``totalWidth``)
            let inline ``remove``(``startIndex``:``System``.``Int32``)(``this``:``System``.``String``)= ``this``.``Remove``(``startIndex``)
            let inline ``replace``(``oldChar``:``System``.``Char``)(``newChar``:``System``.``Char``)(``this``:``System``.``String``)= ``this``.``Replace``(``oldChar``,``newChar``)
            let inline ``split``(``separator``:``System``.``Char``)(``count``:``System``.``Int32``)(``options``:``System``.``StringSplitOptions``)(``this``:``System``.``String``)= ``this``.``Split``(``separator``,``count``,``options``=``options``)
            let inline ``startsWith``(``value``:``System``.``Char``)(``this``:``System``.``String``)= ``this``.``StartsWith``(``value``)
            let inline ``substring``(``startIndex``:``System``.``Int32``)(``this``:``System``.``String``)= ``this``.``Substring``(``startIndex``)
            let inline ``toCharArray``(``this``:``System``.``String``)= ``this``.``ToCharArray``()
            let inline ``toLower``(``this``:``System``.``String``)= ``this``.``ToLower``()
            let inline ``toLowerInvariant``(``this``:``System``.``String``)= ``this``.``ToLowerInvariant``()
            let inline ``toString``(``this``:``System``.``String``)= ``this``.``ToString``()
            let inline ``toUpper``(``this``:``System``.``String``)= ``this``.``ToUpper``()
            let inline ``toUpperInvariant``(``this``:``System``.``String``)= ``this``.``ToUpperInvariant``()
            let inline ``trim``(``this``:``System``.``String``)= ``this``.``Trim``()
            let inline ``trimEnd``(``this``:``System``.``String``)= ``this``.``TrimEnd``()
            let inline ``trimStart``(``this``:``System``.``String``)= ``this``.``TrimStart``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``StringComparer`` =
        begin
            let inline ``compare``(``x``:``System``.``Object``)(``y``:``System``.``Object``)(``this``:``System``.``StringComparer``)= ``this``.``Compare``(``x``,``y``)
            let inline ``equals``(``x``:``System``.``Object``)(``y``:``System``.``Object``)(``this``:``System``.``StringComparer``)= ``this``.``Equals``(``x``,``y``)
            let inline ``getHashCode``(``obj``:``System``.``Object``)(``this``:``System``.``StringComparer``)= ``this``.``GetHashCode``(``obj``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``SystemException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``SystemException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``TimeSpan`` =
        begin
            let inline ``add``(``ts``:``System``.``TimeSpan``)(``this``:``System``.``TimeSpan``)= ``this``.``Add``(``ts``)
            let inline ``compareTo``(``value``:``System``.``Object``)(``this``:``System``.``TimeSpan``)= ``this``.``CompareTo``(``value``)
            let inline ``days``(``this``:``System``.``TimeSpan``)= ``this``.``Days``
            let inline ``divide``(``divisor``:``System``.``Double``)(``this``:``System``.``TimeSpan``)= ``this``.``Divide``(``divisor``)
            let inline ``duration``(``this``:``System``.``TimeSpan``)= ``this``.``Duration``()
            let inline ``equals``(``value``:``System``.``Object``)(``this``:``System``.``TimeSpan``)= ``this``.``Equals``(``value``)
            let inline ``getHashCode``(``this``:``System``.``TimeSpan``)= ``this``.``GetHashCode``()
            let inline ``hours``(``this``:``System``.``TimeSpan``)= ``this``.``Hours``
            let inline ``milliseconds``(``this``:``System``.``TimeSpan``)= ``this``.``Milliseconds``
            let inline ``minutes``(``this``:``System``.``TimeSpan``)= ``this``.``Minutes``
            let inline ``multiply``(``factor``:``System``.``Double``)(``this``:``System``.``TimeSpan``)= ``this``.``Multiply``(``factor``)
            let inline ``negate``(``this``:``System``.``TimeSpan``)= ``this``.``Negate``()
            let inline ``ofInt64``(``ticks``:``System``.``Int64``)= new ``System``.``TimeSpan``(``ticks``)
            let inline ``seconds``(``this``:``System``.``TimeSpan``)= ``this``.``Seconds``
            let inline ``subtract``(``ts``:``System``.``TimeSpan``)(``this``:``System``.``TimeSpan``)= ``this``.``Subtract``(``ts``)
            let inline ``ticks``(``this``:``System``.``TimeSpan``)= ``this``.``Ticks``
            let inline ``toString``(``this``:``System``.``TimeSpan``)= ``this``.``ToString``()
            let inline ``totalDays``(``this``:``System``.``TimeSpan``)= ``this``.``TotalDays``
            let inline ``totalHours``(``this``:``System``.``TimeSpan``)= ``this``.``TotalHours``
            let inline ``totalMilliseconds``(``this``:``System``.``TimeSpan``)= ``this``.``TotalMilliseconds``
            let inline ``totalMinutes``(``this``:``System``.``TimeSpan``)= ``this``.``TotalMinutes``
            let inline ``totalSeconds``(``this``:``System``.``TimeSpan``)= ``this``.``TotalSeconds``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    [<``System``.``ObsoleteAttribute``(@"System.TimeZone has been deprecated.  Please investigate the use of System.TimeZoneInfo instead.")>]
    module ``TimeZone`` =
        begin
            let inline ``daylightName``(``this``:``System``.``TimeZone``)= ``this``.``DaylightName``
            let inline ``getDaylightChanges``(``year``:``System``.``Int32``)(``this``:``System``.``TimeZone``)= ``this``.``GetDaylightChanges``(``year``)
            let inline ``getUtcOffset``(``time``:``System``.``DateTime``)(``this``:``System``.``TimeZone``)= ``this``.``GetUtcOffset``(``time``)
            let inline ``isDaylightSavingTime``(``time``:``System``.``DateTime``)(``this``:``System``.``TimeZone``)= ``this``.``IsDaylightSavingTime``(``time``)
            let inline ``standardName``(``this``:``System``.``TimeZone``)= ``this``.``StandardName``
            let inline ``toLocalTime``(``time``:``System``.``DateTime``)(``this``:``System``.``TimeZone``)= ``this``.``ToLocalTime``(``time``)
            let inline ``toUniversalTime``(``time``:``System``.``DateTime``)(``this``:``System``.``TimeZone``)= ``this``.``ToUniversalTime``(``time``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``TimeZoneInfo`` =
        begin
            let inline (|``SupportsDaylightSavingTime``|_|)(``this``:``System``.``TimeZoneInfo``)= if ``this``.``SupportsDaylightSavingTime`` then Some() else None
            let inline ``baseUtcOffset``(``this``:``System``.``TimeZoneInfo``)= ``this``.``BaseUtcOffset``
            let inline ``daylightName``(``this``:``System``.``TimeZoneInfo``)= ``this``.``DaylightName``
            let inline ``displayName``(``this``:``System``.``TimeZoneInfo``)= ``this``.``DisplayName``
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``TimeZoneInfo``)= ``this``.``Equals``(``obj``)
            let inline ``getAdjustmentRules``(``this``:``System``.``TimeZoneInfo``)= ``this``.``GetAdjustmentRules``()
            let inline ``getAmbiguousTimeOffsets``(``dateTime``:``System``.``DateTime``)(``this``:``System``.``TimeZoneInfo``)= ``this``.``GetAmbiguousTimeOffsets``(``dateTime``)
            let inline ``getHashCode``(``this``:``System``.``TimeZoneInfo``)= ``this``.``GetHashCode``()
            let inline ``getUtcOffset``(``dateTime``:``System``.``DateTime``)(``this``:``System``.``TimeZoneInfo``)= ``this``.``GetUtcOffset``(``dateTime``)
            let inline ``hasSameRules``(``other``:``System``.``TimeZoneInfo``)(``this``:``System``.``TimeZoneInfo``)= ``this``.``HasSameRules``(``other``)
            let inline ``id``(``this``:``System``.``TimeZoneInfo``)= ``this``.``Id``
            let inline ``isAmbiguousTime``(``dateTime``:``System``.``DateTime``)(``this``:``System``.``TimeZoneInfo``)= ``this``.``IsAmbiguousTime``(``dateTime``)
            let inline ``isDaylightSavingTime``(``dateTime``:``System``.``DateTime``)(``this``:``System``.``TimeZoneInfo``)= ``this``.``IsDaylightSavingTime``(``dateTime``)
            let inline ``isInvalidTime``(``dateTime``:``System``.``DateTime``)(``this``:``System``.``TimeZoneInfo``)= ``this``.``IsInvalidTime``(``dateTime``)
            let inline ``standardName``(``this``:``System``.``TimeZoneInfo``)= ``this``.``StandardName``
            let inline ``toSerializedString``(``this``:``System``.``TimeZoneInfo``)= ``this``.``ToSerializedString``()
            let inline ``toString``(``this``:``System``.``TimeZoneInfo``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``TimeZoneNotFoundException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``TimeZoneNotFoundException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``TimeoutException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``TimeoutException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Type`` =
        begin
            let inline (|``ContainsGenericParameters``|_|)(``this``:``System``.``Type``)= if ``this``.``ContainsGenericParameters`` then Some() else None
            let inline (|``HasElementType``|_|)(``this``:``System``.``Type``)= if ``this``.``HasElementType`` then Some() else None
            let inline (|``IsAbstract``|_|)(``this``:``System``.``Type``)= if ``this``.``IsAbstract`` then Some() else None
            let inline (|``IsAnsiClass``|_|)(``this``:``System``.``Type``)= if ``this``.``IsAnsiClass`` then Some() else None
            let inline (|``IsArray``|_|)(``this``:``System``.``Type``)= if ``this``.``IsArray`` then Some() else None
            let inline (|``IsAutoClass``|_|)(``this``:``System``.``Type``)= if ``this``.``IsAutoClass`` then Some() else None
            let inline (|``IsAutoLayout``|_|)(``this``:``System``.``Type``)= if ``this``.``IsAutoLayout`` then Some() else None
            let inline (|``IsByRef``|_|)(``this``:``System``.``Type``)= if ``this``.``IsByRef`` then Some() else None
            let inline (|``IsByRefLike``|_|)(``this``:``System``.``Type``)= if ``this``.``IsByRefLike`` then Some() else None
            let inline (|``IsCOMObject``|_|)(``this``:``System``.``Type``)= if ``this``.``IsCOMObject`` then Some() else None
            let inline (|``IsClass``|_|)(``this``:``System``.``Type``)= if ``this``.``IsClass`` then Some() else None
            let inline (|``IsConstructedGenericType``|_|)(``this``:``System``.``Type``)= if ``this``.``IsConstructedGenericType`` then Some() else None
            let inline (|``IsContextful``|_|)(``this``:``System``.``Type``)= if ``this``.``IsContextful`` then Some() else None
            let inline (|``IsEnum``|_|)(``this``:``System``.``Type``)= if ``this``.``IsEnum`` then Some() else None
            let inline (|``IsExplicitLayout``|_|)(``this``:``System``.``Type``)= if ``this``.``IsExplicitLayout`` then Some() else None
            let inline (|``IsGenericMethodParameter``|_|)(``this``:``System``.``Type``)= if ``this``.``IsGenericMethodParameter`` then Some() else None
            let inline (|``IsGenericParameter``|_|)(``this``:``System``.``Type``)= if ``this``.``IsGenericParameter`` then Some() else None
            let inline (|``IsGenericType``|_|)(``this``:``System``.``Type``)= if ``this``.``IsGenericType`` then Some() else None
            let inline (|``IsGenericTypeDefinition``|_|)(``this``:``System``.``Type``)= if ``this``.``IsGenericTypeDefinition`` then Some() else None
            let inline (|``IsGenericTypeParameter``|_|)(``this``:``System``.``Type``)= if ``this``.``IsGenericTypeParameter`` then Some() else None
            let inline (|``IsImport``|_|)(``this``:``System``.``Type``)= if ``this``.``IsImport`` then Some() else None
            let inline (|``IsInterface``|_|)(``this``:``System``.``Type``)= if ``this``.``IsInterface`` then Some() else None
            let inline (|``IsLayoutSequential``|_|)(``this``:``System``.``Type``)= if ``this``.``IsLayoutSequential`` then Some() else None
            let inline (|``IsMarshalByRef``|_|)(``this``:``System``.``Type``)= if ``this``.``IsMarshalByRef`` then Some() else None
            let inline (|``IsNested``|_|)(``this``:``System``.``Type``)= if ``this``.``IsNested`` then Some() else None
            let inline (|``IsNestedAssembly``|_|)(``this``:``System``.``Type``)= if ``this``.``IsNestedAssembly`` then Some() else None
            let inline (|``IsNestedFamANDAssem``|_|)(``this``:``System``.``Type``)= if ``this``.``IsNestedFamANDAssem`` then Some() else None
            let inline (|``IsNestedFamORAssem``|_|)(``this``:``System``.``Type``)= if ``this``.``IsNestedFamORAssem`` then Some() else None
            let inline (|``IsNestedFamily``|_|)(``this``:``System``.``Type``)= if ``this``.``IsNestedFamily`` then Some() else None
            let inline (|``IsNestedPrivate``|_|)(``this``:``System``.``Type``)= if ``this``.``IsNestedPrivate`` then Some() else None
            let inline (|``IsNestedPublic``|_|)(``this``:``System``.``Type``)= if ``this``.``IsNestedPublic`` then Some() else None
            let inline (|``IsNotPublic``|_|)(``this``:``System``.``Type``)= if ``this``.``IsNotPublic`` then Some() else None
            let inline (|``IsPointer``|_|)(``this``:``System``.``Type``)= if ``this``.``IsPointer`` then Some() else None
            let inline (|``IsPrimitive``|_|)(``this``:``System``.``Type``)= if ``this``.``IsPrimitive`` then Some() else None
            let inline (|``IsPublic``|_|)(``this``:``System``.``Type``)= if ``this``.``IsPublic`` then Some() else None
            let inline (|``IsSZArray``|_|)(``this``:``System``.``Type``)= if ``this``.``IsSZArray`` then Some() else None
            let inline (|``IsSealed``|_|)(``this``:``System``.``Type``)= if ``this``.``IsSealed`` then Some() else None
            let inline (|``IsSecurityCritical``|_|)(``this``:``System``.``Type``)= if ``this``.``IsSecurityCritical`` then Some() else None
            let inline (|``IsSecuritySafeCritical``|_|)(``this``:``System``.``Type``)= if ``this``.``IsSecuritySafeCritical`` then Some() else None
            let inline (|``IsSecurityTransparent``|_|)(``this``:``System``.``Type``)= if ``this``.``IsSecurityTransparent`` then Some() else None
            let inline (|``IsSerializable``|_|)(``this``:``System``.``Type``)= if ``this``.``IsSerializable`` then Some() else None
            let inline (|``IsSignatureType``|_|)(``this``:``System``.``Type``)= if ``this``.``IsSignatureType`` then Some() else None
            let inline (|``IsSpecialName``|_|)(``this``:``System``.``Type``)= if ``this``.``IsSpecialName`` then Some() else None
            let inline (|``IsTypeDefinition``|_|)(``this``:``System``.``Type``)= if ``this``.``IsTypeDefinition`` then Some() else None
            let inline (|``IsUnicodeClass``|_|)(``this``:``System``.``Type``)= if ``this``.``IsUnicodeClass`` then Some() else None
            let inline (|``IsValueType``|_|)(``this``:``System``.``Type``)= if ``this``.``IsValueType`` then Some() else None
            let inline (|``IsVariableBoundArray``|_|)(``this``:``System``.``Type``)= if ``this``.``IsVariableBoundArray`` then Some() else None
            let inline (|``IsVisible``|_|)(``this``:``System``.``Type``)= if ``this``.``IsVisible`` then Some() else None
            let inline ``assembly``(``this``:``System``.``Type``)= ``this``.``Assembly``
            let inline ``assemblyQualifiedName``(``this``:``System``.``Type``)= ``this``.``AssemblyQualifiedName``
            let inline ``attributes``(``this``:``System``.``Type``)= ``this``.``Attributes``
            let inline ``baseType``(``this``:``System``.``Type``)= ``this``.``BaseType``
            let inline ``declaringMethod``(``this``:``System``.``Type``)= ``this``.``DeclaringMethod``
            let inline ``declaringType``(``this``:``System``.``Type``)= ``this``.``DeclaringType``
            let inline ``equals``(``o``:``System``.``Object``)(``this``:``System``.``Type``)= ``this``.``Equals``(``o``)
            let inline ``findInterfaces``(``filter``:``System``.``Reflection``.``TypeFilter``)(``filterCriteria``:``System``.``Object``)(``this``:``System``.``Type``)= ``this``.``FindInterfaces``(``filter``,``filterCriteria``)
            let inline ``findMembers``(``memberType``:``System``.``Reflection``.``MemberTypes``)(``bindingAttr``:``System``.``Reflection``.``BindingFlags``)(``filter``:``System``.``Reflection``.``MemberFilter``)(``filterCriteria``:``System``.``Object``)(``this``:``System``.``Type``)= ``this``.``FindMembers``(``memberType``,``bindingAttr``,``filter``,``filterCriteria``)
            let inline ``fullName``(``this``:``System``.``Type``)= ``this``.``FullName``
            let inline ``gUID``(``this``:``System``.``Type``)= ``this``.``GUID``
            let inline ``genericParameterAttributes``(``this``:``System``.``Type``)= ``this``.``GenericParameterAttributes``
            let inline ``genericParameterPosition``(``this``:``System``.``Type``)= ``this``.``GenericParameterPosition``
            let inline ``genericTypeArguments``(``this``:``System``.``Type``)= ``this``.``GenericTypeArguments``
            let inline ``getArrayRank``(``this``:``System``.``Type``)= ``this``.``GetArrayRank``()
            let inline ``getConstructor``(``bindingAttr``:``System``.``Reflection``.``BindingFlags``)(``binder``:``System``.``Reflection``.``Binder``)(``callConvention``:``System``.``Reflection``.``CallingConventions``)(``types``:``System``.``Type``[])(``modifiers``:``System``.``Reflection``.``ParameterModifier``[])(``this``:``System``.``Type``)= ``this``.``GetConstructor``(``bindingAttr``,``binder``,``callConvention``,``types``,``modifiers``)
            let inline ``getConstructors``(``this``:``System``.``Type``)= ``this``.``GetConstructors``()
            let inline ``getDefaultMembers``(``this``:``System``.``Type``)= ``this``.``GetDefaultMembers``()
            let inline ``getElementType``(``this``:``System``.``Type``)= ``this``.``GetElementType``()
            let inline ``getEnumName``(``value``:``System``.``Object``)(``this``:``System``.``Type``)= ``this``.``GetEnumName``(``value``)
            let inline ``getEnumNames``(``this``:``System``.``Type``)= ``this``.``GetEnumNames``()
            let inline ``getEnumUnderlyingType``(``this``:``System``.``Type``)= ``this``.``GetEnumUnderlyingType``()
            let inline ``getEnumValues``(``this``:``System``.``Type``)= ``this``.``GetEnumValues``()
            let inline ``getEvent``(``name``:``System``.``String``)(``this``:``System``.``Type``)= ``this``.``GetEvent``(``name``)
            let inline ``getEvents``(``this``:``System``.``Type``)= ``this``.``GetEvents``()
            let inline ``getField``(``name``:``System``.``String``)(``this``:``System``.``Type``)= ``this``.``GetField``(``name``)
            let inline ``getFields``(``this``:``System``.``Type``)= ``this``.``GetFields``()
            let inline ``getGenericArguments``(``this``:``System``.``Type``)= ``this``.``GetGenericArguments``()
            let inline ``getGenericParameterConstraints``(``this``:``System``.``Type``)= ``this``.``GetGenericParameterConstraints``()
            let inline ``getGenericTypeDefinition``(``this``:``System``.``Type``)= ``this``.``GetGenericTypeDefinition``()
            let inline ``getHashCode``(``this``:``System``.``Type``)= ``this``.``GetHashCode``()
            let inline ``getInterface``(``name``:``System``.``String``)(``this``:``System``.``Type``)= ``this``.``GetInterface``(``name``)
            let inline ``getInterfaceMap``(``interfaceType``:``System``.``Type``)(``this``:``System``.``Type``)= ``this``.``GetInterfaceMap``(``interfaceType``)
            let inline ``getInterfaces``(``this``:``System``.``Type``)= ``this``.``GetInterfaces``()
            let inline ``getMember``(``name``:``System``.``String``)(``this``:``System``.``Type``)= ``this``.``GetMember``(``name``)
            let inline ``getMembers``(``this``:``System``.``Type``)= ``this``.``GetMembers``()
            let inline ``getMethod``(``name``:``System``.``String``)(``this``:``System``.``Type``)= ``this``.``GetMethod``(``name``)
            let inline ``getMethods``(``this``:``System``.``Type``)= ``this``.``GetMethods``()
            let inline ``getNestedType``(``name``:``System``.``String``)(``this``:``System``.``Type``)= ``this``.``GetNestedType``(``name``)
            let inline ``getNestedTypes``(``this``:``System``.``Type``)= ``this``.``GetNestedTypes``()
            let inline ``getProperties``(``this``:``System``.``Type``)= ``this``.``GetProperties``()
            let inline ``getProperty``(``name``:``System``.``String``)(``this``:``System``.``Type``)= ``this``.``GetProperty``(``name``)
            let inline ``getType``(``this``:``System``.``Type``)= ``this``.``GetType``()
            let inline ``invokeMember``(``name``:``System``.``String``)(``invokeAttr``:``System``.``Reflection``.``BindingFlags``)(``binder``:``System``.``Reflection``.``Binder``)(``target``:``System``.``Object``)(``args``:``System``.``Object``[])(``this``:``System``.``Type``)= ``this``.``InvokeMember``(``name``,``invokeAttr``,``binder``,``target``,``args``)
            let inline ``isAssignableFrom``(``c``:``System``.``Type``)(``this``:``System``.``Type``)= ``this``.``IsAssignableFrom``(``c``)
            let inline ``isEnumDefined``(``value``:``System``.``Object``)(``this``:``System``.``Type``)= ``this``.``IsEnumDefined``(``value``)
            let inline ``isEquivalentTo``(``other``:``System``.``Type``)(``this``:``System``.``Type``)= ``this``.``IsEquivalentTo``(``other``)
            let inline ``isInstanceOfType``(``o``:``System``.``Object``)(``this``:``System``.``Type``)= ``this``.``IsInstanceOfType``(``o``)
            let inline ``isSubclassOf``(``c``:``System``.``Type``)(``this``:``System``.``Type``)= ``this``.``IsSubclassOf``(``c``)
            let inline ``makeArrayType``(``this``:``System``.``Type``)= ``this``.``MakeArrayType``()
            let inline ``makeByRefType``(``this``:``System``.``Type``)= ``this``.``MakeByRefType``()
            let inline ``makeGenericType``(``typeArguments``:``System``.``Type``[])(``this``:``System``.``Type``)= ``this``.``MakeGenericType``(``typeArguments``)
            let inline ``makePointerType``(``this``:``System``.``Type``)= ``this``.``MakePointerType``()
            let inline ``memberType``(``this``:``System``.``Type``)= ``this``.``MemberType``
            let inline ``module``(``this``:``System``.``Type``)= ``this``.``Module``
            let inline ``namespace``(``this``:``System``.``Type``)= ``this``.``Namespace``
            let inline ``reflectedType``(``this``:``System``.``Type``)= ``this``.``ReflectedType``
            let inline ``structLayoutAttribute``(``this``:``System``.``Type``)= ``this``.``StructLayoutAttribute``
            let inline ``toString``(``this``:``System``.``Type``)= ``this``.``ToString``()
            let inline ``typeHandle``(``this``:``System``.``Type``)= ``this``.``TypeHandle``
            let inline ``typeInitializer``(``this``:``System``.``Type``)= ``this``.``TypeInitializer``
            let inline ``underlyingSystemType``(``this``:``System``.``Type``)= ``this``.``UnderlyingSystemType``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``TypeAccessException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``TypeAccessException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``TypeInitializationException`` =
        begin
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``TypeInitializationException``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``typeName``(``this``:``System``.``TypeInitializationException``)= ``this``.``TypeName``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``TypeLoadException`` =
        begin
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``TypeLoadException``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``message``(``this``:``System``.``TypeLoadException``)= ``this``.``Message``
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``TypeLoadException``(``message``)
            let inline ``typeName``(``this``:``System``.``TypeLoadException``)= ``this``.``TypeName``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``TypeUnloadedException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``TypeUnloadedException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``UInt16`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Object``)(``this``:``System``.``UInt16``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``UInt16``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``UInt16``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``UInt16``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``UInt16``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``UInt32`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Object``)(``this``:``System``.``UInt32``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``UInt32``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``UInt32``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``UInt32``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``UInt32``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``UInt64`` =
        begin
            let inline ``compareTo``(``value``:``System``.``Object``)(``this``:``System``.``UInt64``)= ``this``.``CompareTo``(``value``)
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``UInt64``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``UInt64``)= ``this``.``GetHashCode``()
            let inline ``getTypeCode``(``this``:``System``.``UInt64``)= ``this``.``GetTypeCode``()
            let inline ``toString``(``this``:``System``.``UInt64``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``UIntPtr`` =
        begin
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``UIntPtr``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``UIntPtr``)= ``this``.``GetHashCode``()
            let inline ``ofUInt32``(``value``:``System``.``UInt32``)= new ``System``.``UIntPtr``(``value``)
            let inline ``ofUInt64``(``value``:``System``.``UInt64``)= new ``System``.``UIntPtr``(``value``)
            let inline ``toPointer``(``this``:``System``.``UIntPtr``)= ``this``.``ToPointer``()
            let inline ``toString``(``this``:``System``.``UIntPtr``)= ``this``.``ToString``()
            let inline ``toUInt32``(``this``:``System``.``UIntPtr``)= ``this``.``ToUInt32``()
            let inline ``toUInt64``(``this``:``System``.``UIntPtr``)= ``this``.``ToUInt64``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``UnauthorizedAccessException`` =
        begin
            let inline ``ofString``(``message``:``System``.``String``)= new ``System``.``UnauthorizedAccessException``(``message``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``UnhandledExceptionEventArgs`` =
        begin
            let inline (|``IsTerminating``|_|)(``this``:``System``.``UnhandledExceptionEventArgs``)= if ``this``.``IsTerminating`` then Some() else None
            let inline ``exceptionObject``(``this``:``System``.``UnhandledExceptionEventArgs``)= ``this``.``ExceptionObject``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Uri`` =
        begin
            let inline (|``IsAbsoluteUri``|_|)(``this``:``System``.``Uri``)= if ``this``.``IsAbsoluteUri`` then Some() else None
            let inline (|``IsDefaultPort``|_|)(``this``:``System``.``Uri``)= if ``this``.``IsDefaultPort`` then Some() else None
            let inline (|``IsFile``|_|)(``this``:``System``.``Uri``)= if ``this``.``IsFile`` then Some() else None
            let inline (|``IsLoopback``|_|)(``this``:``System``.``Uri``)= if ``this``.``IsLoopback`` then Some() else None
            let inline (|``IsUnc``|_|)(``this``:``System``.``Uri``)= if ``this``.``IsUnc`` then Some() else None
            let inline (|``UserEscaped``|_|)(``this``:``System``.``Uri``)= if ``this``.``UserEscaped`` then Some() else None
            let inline ``absolutePath``(``this``:``System``.``Uri``)= ``this``.``AbsolutePath``
            let inline ``absoluteUri``(``this``:``System``.``Uri``)= ``this``.``AbsoluteUri``
            let inline ``authority``(``this``:``System``.``Uri``)= ``this``.``Authority``
            let inline ``dnsSafeHost``(``this``:``System``.``Uri``)= ``this``.``DnsSafeHost``
            let inline ``equals``(``comparand``:``System``.``Object``)(``this``:``System``.``Uri``)= ``this``.``Equals``(``comparand``)
            let inline ``fragment``(``this``:``System``.``Uri``)= ``this``.``Fragment``
            let inline ``getComponents``(``components``:``System``.``UriComponents``)(``format``:``System``.``UriFormat``)(``this``:``System``.``Uri``)= ``this``.``GetComponents``(``components``,``format``)
            let inline ``getHashCode``(``this``:``System``.``Uri``)= ``this``.``GetHashCode``()
            let inline ``getLeftPart``(``part``:``System``.``UriPartial``)(``this``:``System``.``Uri``)= ``this``.``GetLeftPart``(``part``)
            let inline ``host``(``this``:``System``.``Uri``)= ``this``.``Host``
            let inline ``hostNameType``(``this``:``System``.``Uri``)= ``this``.``HostNameType``
            let inline ``idnHost``(``this``:``System``.``Uri``)= ``this``.``IdnHost``
            let inline ``isBaseOf``(``uri``:``System``.``Uri``)(``this``:``System``.``Uri``)= ``this``.``IsBaseOf``(``uri``)
            let inline ``isWellFormedOriginalString``(``this``:``System``.``Uri``)= ``this``.``IsWellFormedOriginalString``()
            let inline ``localPath``(``this``:``System``.``Uri``)= ``this``.``LocalPath``
            [<``System``.``ObsoleteAttribute``(@"The method has been deprecated. Please use MakeRelativeUri(Uri uri). https://go.microsoft.com/fwlink/?linkid=14202")>]
            let inline ``makeRelative``(``toUri``:``System``.``Uri``)(``this``:``System``.``Uri``)= ``this``.``MakeRelative``(``toUri``)
            let inline ``makeRelativeUri``(``uri``:``System``.``Uri``)(``this``:``System``.``Uri``)= ``this``.``MakeRelativeUri``(``uri``)
            let inline ``ofString``(``uriString``:``System``.``String``)= new ``System``.``Uri``(``uriString``)
            let inline ``originalString``(``this``:``System``.``Uri``)= ``this``.``OriginalString``
            let inline ``pathAndQuery``(``this``:``System``.``Uri``)= ``this``.``PathAndQuery``
            let inline ``port``(``this``:``System``.``Uri``)= ``this``.``Port``
            let inline ``query``(``this``:``System``.``Uri``)= ``this``.``Query``
            let inline ``scheme``(``this``:``System``.``Uri``)= ``this``.``Scheme``
            let inline ``segments``(``this``:``System``.``Uri``)= ``this``.``Segments``
            let inline ``toString``(``this``:``System``.``Uri``)= ``this``.``ToString``()
            let inline ``userInfo``(``this``:``System``.``Uri``)= ``this``.``UserInfo``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``UriBuilder`` =
        begin
            let inline ``equals``(``rparam``:``System``.``Object``)(``this``:``System``.``UriBuilder``)= ``this``.``Equals``(``rparam``)
            let inline ``getHashCode``(``this``:``System``.``UriBuilder``)= ``this``.``GetHashCode``()
            let inline ``ofString``(``uri``:``System``.``String``)= new ``System``.``UriBuilder``(``uri``)
            let inline ``ofUri``(``uri``:``System``.``Uri``)= new ``System``.``UriBuilder``(``uri``)
            let inline ``toString``(``this``:``System``.``UriBuilder``)= ``this``.``ToString``()
            let inline ``uri``(``this``:``System``.``UriBuilder``)= ``this``.``Uri``
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``UriFormatException`` =
        begin
            let inline ``ofString``(``textString``:``System``.``String``)= new ``System``.``UriFormatException``(``textString``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``UriTypeConverter`` =
        begin
            let inline ``canConvertFrom``(``context``:``System``.``ComponentModel``.``ITypeDescriptorContext``)(``sourceType``:``System``.``Type``)(``this``:``System``.``UriTypeConverter``)= ``this``.``CanConvertFrom``(``context``,``sourceType``)
            let inline ``canConvertTo``(``context``:``System``.``ComponentModel``.``ITypeDescriptorContext``)(``destinationType``:``System``.``Type``)(``this``:``System``.``UriTypeConverter``)= ``this``.``CanConvertTo``(``context``,``destinationType``)
            let inline ``convertFrom``(``context``:``System``.``ComponentModel``.``ITypeDescriptorContext``)(``culture``:``System``.``Globalization``.``CultureInfo``)(``value``:``System``.``Object``)(``this``:``System``.``UriTypeConverter``)= ``this``.``ConvertFrom``(``context``,``culture``,``value``)
            let inline ``convertTo``(``context``:``System``.``ComponentModel``.``ITypeDescriptorContext``)(``culture``:``System``.``Globalization``.``CultureInfo``)(``value``:``System``.``Object``)(``destinationType``:``System``.``Type``)(``this``:``System``.``UriTypeConverter``)= ``this``.``ConvertTo``(``context``,``culture``,``value``,``destinationType``)
            let inline ``isValid``(``context``:``System``.``ComponentModel``.``ITypeDescriptorContext``)(``value``:``System``.``Object``)(``this``:``System``.``UriTypeConverter``)= ``this``.``IsValid``(``context``,``value``)
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``ValueType`` =
        begin
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``ValueType``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``ValueType``)= ``this``.``GetHashCode``()
            let inline ``toString``(``this``:``System``.``ValueType``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``Version`` =
        begin
            let inline ``build``(``this``:``System``.``Version``)= ``this``.``Build``
            let inline ``clone``(``this``:``System``.``Version``)= ``this``.``Clone``()
            let inline ``compareTo``(``version``:``System``.``Object``)(``this``:``System``.``Version``)= ``this``.``CompareTo``(``version``)
            let inline ``equals``(``obj``:``System``.``Object``)(``this``:``System``.``Version``)= ``this``.``Equals``(``obj``)
            let inline ``getHashCode``(``this``:``System``.``Version``)= ``this``.``GetHashCode``()
            let inline ``major``(``this``:``System``.``Version``)= ``this``.``Major``
            let inline ``majorRevision``(``this``:``System``.``Version``)= ``this``.``MajorRevision``
            let inline ``minor``(``this``:``System``.``Version``)= ``this``.``Minor``
            let inline ``minorRevision``(``this``:``System``.``Version``)= ``this``.``MinorRevision``
            let inline ``ofString``(``version``:``System``.``String``)= new ``System``.``Version``(``version``)
            let inline ``revision``(``this``:``System``.``Version``)= ``this``.``Revision``
            let inline ``toString``(``this``:``System``.``Version``)= ``this``.``ToString``()
        end
    [<``Microsoft``.``FSharp``.``Core``.``CompilationRepresentationAttribute``(global.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)>]
    module ``WeakReference`` =
        begin
            let inline (|``IsAlive``|_|)(``this``:``System``.``WeakReference``)= if ``this``.``IsAlive`` then Some() else None
            let inline (|``TrackResurrection``|_|)(``this``:``System``.``WeakReference``)= if ``this``.``TrackResurrection`` then Some() else None
            let inline ``getObjectData``(``info``:``System``.``Runtime``.``Serialization``.``SerializationInfo``)(``context``:``System``.``Runtime``.``Serialization``.``StreamingContext``)(``this``:``System``.``WeakReference``)= ``this``.``GetObjectData``(``info``,``context``)
            let inline ``ofObject``(``target``:``System``.``Object``)= new ``System``.``WeakReference``(``target``)
            let inline ``setTarget``(``target``:'``T``)(``this``:``System``.``WeakReference``<'``T``>)= ``this``.``SetTarget``(``target``)
        end
