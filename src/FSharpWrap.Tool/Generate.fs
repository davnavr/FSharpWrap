module FSharpWrap.Tool.Generate

open System.IO
open System.Reflection

let fromAssemblies (assemblies: seq<Assembly>) (filter: Filter) (printer: Printer) =
    let assemblies' = Seq.where (Filter.assemblyIncluded filter) assemblies
    printer.Comment "This code was automatically generated by FSharpWrap"
    printer.Comment "Changes made to this file will be lost when it is regenerated"
    printer.Comment "# Included Assemblies:"
    for assembly in assemblies' do
        sprintf "- %s" assembly.FullName |> printer.Comment
    // TODO: Print namespaces.

let fromResolver resolver loader =
    use context = new MetadataLoadContext(resolver)
    loader context |> fromAssemblies

let fromPaths assemblies =
    let files =
        Seq.collect
            (function
            | Directory dir ->
                Directory.EnumerateFiles(dir.Path, "*.dll", SearchOption.AllDirectories)
            | File file -> Seq.singleton file.Path)
            assemblies
    fromResolver
        (PathAssemblyResolver files)
        (fun context -> Seq.map context.LoadFromAssemblyPath files)
